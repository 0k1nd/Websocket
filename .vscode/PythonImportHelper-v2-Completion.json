[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "djangochannelsrestframework",
        "description": "djangochannelsrestframework",
        "isExtraImport": true,
        "detail": "djangochannelsrestframework",
        "documentation": {}
    },
    {
        "label": "GenericAsyncAPIConsumer",
        "importPath": "djangochannelsrestframework.generics",
        "description": "djangochannelsrestframework.generics",
        "isExtraImport": true,
        "detail": "djangochannelsrestframework.generics",
        "documentation": {}
    },
    {
        "label": "ObserverModelInstanceMixin",
        "importPath": "djangochannelsrestframework.observer.generics",
        "description": "djangochannelsrestframework.observer.generics",
        "isExtraImport": true,
        "detail": "djangochannelsrestframework.observer.generics",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "djangochannelsrestframework.observer.generics",
        "description": "djangochannelsrestframework.observer.generics",
        "isExtraImport": true,
        "detail": "djangochannelsrestframework.observer.generics",
        "documentation": {}
    },
    {
        "label": "model_observer",
        "importPath": "djangochannelsrestframework.observer",
        "description": "djangochannelsrestframework.observer",
        "isExtraImport": true,
        "detail": "djangochannelsrestframework.observer",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "sync_to_async",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "channels.middleware",
        "description": "channels.middleware",
        "isExtraImport": true,
        "detail": "channels.middleware",
        "documentation": {}
    },
    {
        "label": "BaseMiddleware",
        "importPath": "channels.middleware",
        "description": "channels.middleware",
        "isExtraImport": true,
        "detail": "channels.middleware",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt",
        "description": "jwt",
        "isExtraImport": true,
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "importPath": "http.client",
        "description": "http.client",
        "isExtraImport": true,
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "rest_framework.authtoken.admin",
        "description": "rest_framework.authtoken.admin",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.admin",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "JwtAuthMiddleware",
        "importPath": "chat.middleware",
        "description": "chat.middleware",
        "isExtraImport": true,
        "detail": "chat.middleware",
        "documentation": {}
    },
    {
        "label": "routing",
        "importPath": "chat",
        "description": "chat",
        "isExtraImport": true,
        "detail": "chat",
        "documentation": {}
    },
    {
        "label": "urls",
        "importPath": "chat",
        "description": "chat",
        "isExtraImport": true,
        "detail": "chat",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "mysite.chat.migrations.0001_initial",
        "description": "mysite.chat.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "mysite.chat.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ChatConfig",
        "kind": 6,
        "importPath": "mysite.chat.apps",
        "description": "mysite.chat.apps",
        "peekOfCode": "class ChatConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chat'",
        "detail": "mysite.chat.apps",
        "documentation": {}
    },
    {
        "label": "RoomConsumer",
        "kind": 6,
        "importPath": "mysite.chat.consumers",
        "description": "mysite.chat.consumers",
        "peekOfCode": "class RoomConsumer(ObserverModelInstanceMixin, GenericAsyncAPIConsumer):\n    queryset = models.Room.objects.all()\n    serializer_class = serializers.RoomSerializers\n    lookup_field = \"pk\"\n    @database_sync_to_async\n    def add_user_to_room(self, pk):\n        user = self.scope[\"user\"]\n        room = models.Room.objects.get(pk=pk)\n        if not user.current_rooms.filter(pk=room.pk).exists():\n            user.current_rooms.add(room)",
        "detail": "mysite.chat.consumers",
        "documentation": {}
    },
    {
        "label": "UserConsumer",
        "kind": 6,
        "importPath": "mysite.chat.consumers",
        "description": "mysite.chat.consumers",
        "peekOfCode": "class UserConsumer(\n    mixins.ListModelMixin,\n    mixins.RetrieveModelMixin,\n    mixins.PatchModelMixin,\n    mixins.UpdateModelMixin,\n    mixins.CreateModelMixin,\n    mixins.DeleteModelMixin,\n    GenericAsyncAPIConsumer\n):\n    queryset = models.User.objects.all()",
        "detail": "mysite.chat.consumers",
        "documentation": {}
    },
    {
        "label": "JwtAuthMiddleware",
        "kind": 6,
        "importPath": "mysite.chat.middleware",
        "description": "mysite.chat.middleware",
        "peekOfCode": "class JwtAuthMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware для обработки JWT токенов в WebSocket соединениях.\n    \"\"\"\n    async def __call__(self, scope, receive, send):\n        try:\n            query_string = scope.get(\"query_string\", b\"\").decode()\n            token_key = dict(x.split(\"=\") for x in query_string.split(\"&\")).get(\"token\", None)\n            if not token_key:\n                raise ValueError(\"JWT токен отсутствует\")",
        "detail": "mysite.chat.middleware",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "mysite.chat.middleware",
        "description": "mysite.chat.middleware",
        "peekOfCode": "User = get_user_model()\nclass JwtAuthMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware для обработки JWT токенов в WebSocket соединениях.\n    \"\"\"\n    async def __call__(self, scope, receive, send):\n        try:\n            query_string = scope.get(\"query_string\", b\"\").decode()\n            token_key = dict(x.split(\"=\") for x in query_string.split(\"&\")).get(\"token\", None)\n            if not token_key:",
        "detail": "mysite.chat.middleware",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "mysite.chat.models",
        "description": "mysite.chat.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, username, email, password=None):\n        if username is None:\n            raise TypeError(\"у пользователя должно быть имя\")\n        if email is None:\n            raise TypeError(\"у пользователя должна быть электронная почта\")\n        user = self.model(username=username, email=self.normalize_email(email))\n        user.set_password(password)\n        user.save()\n        return user",
        "detail": "mysite.chat.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "mysite.chat.models",
        "description": "mysite.chat.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    username = models.CharField(db_index=True, max_length=255, unique=True)\n    email = models.EmailField(db_index=True, unique=True)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['username']\n    objects = UserManager()",
        "detail": "mysite.chat.models",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "mysite.chat.models",
        "description": "mysite.chat.models",
        "peekOfCode": "class Room(models.Model):\n    name = models.CharField(max_length=255)\n    host = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"rooms\")\n    current_users = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name=\"current_rooms\", blank=True)\n    def __str__(self):\n        return f'{self.id} название{self.name}  хост:{self.host}'\nclass Message(models.Model):\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name=\"messages\")\n    text = models.TextField()\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"messages\")",
        "detail": "mysite.chat.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "mysite.chat.models",
        "description": "mysite.chat.models",
        "peekOfCode": "class Message(models.Model):\n    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name=\"messages\")\n    text = models.TextField()\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"messages\")\n    create_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f' Message{self.id}  room:{self.room}  user:{self.user}'",
        "detail": "mysite.chat.models",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "mysite.chat.routing",
        "description": "mysite.chat.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r'ws/$', consumers.UserConsumer.as_asgi()),\n    re_path(r'ws/chat/$', consumers.RoomConsumer.as_asgi()),\n]",
        "detail": "mysite.chat.routing",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "mysite.chat.serializers",
        "description": "mysite.chat.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n     model = models.User\n     fields = ['id','username','email','password']\n     extra_kwargs = {'password':{'write_only':True}}\n    def create(self, validated_data):\n        user = models.User(\n            email=validated_data['email'],\n            username=validated_data['username']\n        )",
        "detail": "mysite.chat.serializers",
        "documentation": {}
    },
    {
        "label": "MessageSerializer",
        "kind": 6,
        "importPath": "mysite.chat.serializers",
        "description": "mysite.chat.serializers",
        "peekOfCode": "class MessageSerializer(serializers.ModelSerializer):\n    create_at_formated = serializers.SerializerMethodField\n    user = UserSerializer\n    class Meta:\n        model = models.Message\n        exclude = []\n        depth = 1\n    def get_create_at_formated(self, obj: models.Message):\n        return obj.create_at.strftime(\"%d-%m-%Y %H:%M:%S\")\nclass RoomSerializers(serializers.ModelSerializer):",
        "detail": "mysite.chat.serializers",
        "documentation": {}
    },
    {
        "label": "RoomSerializers",
        "kind": 6,
        "importPath": "mysite.chat.serializers",
        "description": "mysite.chat.serializers",
        "peekOfCode": "class RoomSerializers(serializers.ModelSerializer):\n    last_message = serializers.SerializerMethodField()\n    messages = MessageSerializer(many=True, read_only=True)\n    class Meta:\n        model = models.Room\n        fields = '__all__'\n        depht = 1\n        read_only_fields = [\"messages\", \"last_message\"]\n    def get_last_message(self, obj: models.Room):\n        return MessageSerializer(obj.messages.order_by(\"create_at\").last()).data",
        "detail": "mysite.chat.serializers",
        "documentation": {}
    },
    {
        "label": "JwtAuthMiddleware",
        "kind": 6,
        "importPath": "mysite.chat.tokenizator",
        "description": "mysite.chat.tokenizator",
        "peekOfCode": "class JwtAuthMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware для обработки JWT токенов в WebSocket соединениях.\n    \"\"\"\n    async def __call__(self, scope, receive, send):\n        \"\"\"\n        Проверяет JWT токен из query_string или заголовка WebSocket.\n        \"\"\"\n        try:\n            # Получение query_string и парсинг токена",
        "detail": "mysite.chat.tokenizator",
        "documentation": {}
    },
    {
        "label": "JwtAuthMiddlewareStack",
        "kind": 2,
        "importPath": "mysite.chat.tokenizator",
        "description": "mysite.chat.tokenizator",
        "peekOfCode": "def JwtAuthMiddlewareStack(inner):\n    \"\"\"\n    Оборачивает внутренний ASGI consumer middleware для обработки JWT.\n    \"\"\"\n    return JwtAuthMiddleware(inner)",
        "detail": "mysite.chat.tokenizator",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "mysite.chat.tokenizator",
        "description": "mysite.chat.tokenizator",
        "peekOfCode": "User = get_user_model()\nclass JwtAuthMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware для обработки JWT токенов в WebSocket соединениях.\n    \"\"\"\n    async def __call__(self, scope, receive, send):\n        \"\"\"\n        Проверяет JWT токен из query_string или заголовка WebSocket.\n        \"\"\"\n        try:",
        "detail": "mysite.chat.tokenizator",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mysite.chat.urls",
        "description": "mysite.chat.urls",
        "peekOfCode": "urlpatterns = [\n    path('test/', views.test),\n    path('room/<int:pk>/', views.room, name='room'),\n    path('', views.index, name='index'),\n    path('token/', views.RegisterView.as_view(), name='reg'),\n]",
        "detail": "mysite.chat.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "mysite.chat.views",
        "description": "mysite.chat.views",
        "peekOfCode": "class RegisterView(APIView):\n    def post(self, request):\n        username = request.data.get(\"username\")\n        password = request.data.get(\"password\")\n        if not username or not password:\n            return Response({\"error\": \"Имя пользователя и пароль обязательны\"}, status=status.HTTP_400_BAD_REQUEST)\n        if User.objects.filter(username=username).exists():\n            return Response({\"error\": \"Пользователь с таким именем уже существует\"}, status=status.HTTP_400_BAD_REQUEST)\n        user = User.objects.create_user(username=username, password=password)\n        refresh = RefreshToken.for_user(user)",
        "detail": "mysite.chat.views",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "mysite.chat.views",
        "description": "mysite.chat.views",
        "peekOfCode": "def test(request):\n    return render(request, \"chat/test.html\")\ndef index(request):\n    if request.method == \"POST\":\n        name = request.POST.get(\"name\", None)\n        if name:\n            room = models.Room.objects.create(name=name, host=request.user)\n            return HttpResponseRedirect(reverse(\"room\", kwargs={\"pk\": room.pk}))\n        return render(request, 'chat/index.html', {\"error\": \"Имя комнаты обязательно!\"})\n    return render(request, 'chat/index.html')",
        "detail": "mysite.chat.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "mysite.chat.views",
        "description": "mysite.chat.views",
        "peekOfCode": "def index(request):\n    if request.method == \"POST\":\n        name = request.POST.get(\"name\", None)\n        if name:\n            room = models.Room.objects.create(name=name, host=request.user)\n            return HttpResponseRedirect(reverse(\"room\", kwargs={\"pk\": room.pk}))\n        return render(request, 'chat/index.html', {\"error\": \"Имя комнаты обязательно!\"})\n    return render(request, 'chat/index.html')\ndef room(request, pk):\n    room = get_object_or_404(models.Room, pk=pk)",
        "detail": "mysite.chat.views",
        "documentation": {}
    },
    {
        "label": "room",
        "kind": 2,
        "importPath": "mysite.chat.views",
        "description": "mysite.chat.views",
        "peekOfCode": "def room(request, pk):\n    room = get_object_or_404(models.Room, pk=pk)\n    return render(request, 'chat/room.html', {\"room\": room})\nclass RegisterView(APIView):\n    def post(self, request):\n        username = request.data.get(\"username\")\n        password = request.data.get(\"password\")\n        if not username or not password:\n            return Response({\"error\": \"Имя пользователя и пароль обязательны\"}, status=status.HTTP_400_BAD_REQUEST)\n        if User.objects.filter(username=username).exists():",
        "detail": "mysite.chat.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mysite.mysite.asgi",
        "description": "mysite.mysite.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n  \"http\": get_asgi_application(),\n  \"websocket\":URLRouter(\n            routing.websocket_urlpatterns\n    ),\n})",
        "detail": "mysite.mysite.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-l%k7q(9p)=!8!qt$cq%@zuq_yc-k)apzj-khfvdld+t+s@0$61'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nLOGGING_CONFIG = None\n# Application definition",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-l%k7q(9p)=!8!qt$cq%@zuq_yc-k)apzj-khfvdld+t+s@0$61'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nLOGGING_CONFIG = None\n# Application definition\nINSTALLED_APPS = [\n    'redis',\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nLOGGING_CONFIG = None\n# Application definition\nINSTALLED_APPS = [\n    'redis',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nLOGGING_CONFIG = None\n# Application definition\nINSTALLED_APPS = [\n    'redis',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING_CONFIG",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "LOGGING_CONFIG = None\n# Application definition\nINSTALLED_APPS = [\n    'redis',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'redis',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n}",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n}\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'mysite.urls'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "ROOT_URLCONF = 'mysite.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "WSGI_APPLICATION = 'mysite.wsgi.application'\nASGI_APPLICATION = 'mysite.asgi.application'\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [(\"127.0.0.1\", 6379)],  # Убедитесь, что Redis запущен\n        },\n    },\n}",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "ASGI_APPLICATION = 'mysite.asgi.application'\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [(\"127.0.0.1\", 6379)],  # Убедитесь, что Redis запущен\n        },\n    },\n}\n# Database",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [(\"127.0.0.1\", 6379)],  # Убедитесь, что Redis запущен\n        },\n    },\n}\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'chat.User'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'chat.User'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'chat.User'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'chat.User'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'chat.User'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "mysite.mysite.settings",
        "description": "mysite.mysite.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'chat.User'",
        "detail": "mysite.mysite.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "mysite.mysite.urls",
        "description": "mysite.mysite.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('chat/', include(myapp_urls))\n]",
        "detail": "mysite.mysite.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "mysite.mysite.wsgi",
        "description": "mysite.mysite.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "mysite.mysite.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mysite.manage",
        "description": "mysite.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "mysite.manage",
        "documentation": {}
    }
]